@{
    ViewBag.Title = "Backbone Questionnaire";
}

<header>
    <h1>Backbone Questionnaire App</h1>    
</header>
<section id="messages"></section>
<section id="application"></section>

@section scripts
{
    <script>
        var Questionnaires = function() {
            var Models = (function() {
                var Message = Backbone.Model.extend();

                var Questionnaire = Backbone.Model.extend({
                    idAttribute: 'Id',
                    validate: function(attrs, options) {

                    }
                });

                var Question = Backbone.Model.extend({
                    idAttribute: 'Id',
                    validate: function(attrs, options) {

                    }
                });

                var Choice = Backbone.Model.extend({
                    idAttribute: 'Id',
                    validate: function(attrs, options) {

                    }
                });

                var Answer = Backbone.Model.extend({
                    idAttribute: 'Id',
                    validate: function(attrs, options) {

                    }
                });

                return {
                    Message: Message,
                    Questionnaire: Questionnaire,
                    Question: Question,
                    Choice: Choice,
                    Answer: Answer
                };
            })();

            var Collections = (function() {
                var Questionnaires = Backbone.Collection.extend({
                    url: '/api/Questionnaire',
                    model: Models.Questionnaire
                });

                var Questions = Backbone.Collection.extend({
                    url: '/api/Question',
                    model: Models.Question
                });

                var Choices = Backbone.Collection.extend({
                    url: '/api/Choice',
                    model: Models.Choice
                });

                var Answers = Backbone.Collection.extend({
                    url: '/api/Answer',
                    model: Models.Answer
                });

                return {
                    Questionnaires: Questionnaires,
                    Questions: Questions,
                    Choices: Choices,
                    Answers: Answers
                };
            })();

            var Templates = (function () {
                var MessageShow = _.template(
                    '<p class="{{Type}}">{{Message}}</p>'
                );

                var QuestionnaireList = _.template(
                    '<ul class="options">' +
                    '<li class="create">Create Questionnaire</li>' +
                    '</ul>'
                );

                var QuestionnaireListItem = _.template(
                    '<div class="title">{{Title}}</div>' +
                    '<ul class="options">' +
                    '<li class="answer">Answer</li>' +
                    '<li class="show">Show</li>' +
                    '<li class="edit">Edit</li>' +
                    '<li class="destroy">Destroy</li>' +
                    '</ul>'
                );

                var QuestionnaireShow = _.template(
                    '<h2>{{Title}}</h2>' +
                    '<ul class="options">' +
                    '<li class="create">Create Question</li>' +
                    '<li class="back">Back to Questionnaires</li>' +
                    '</ul>'
                );

                var QuestionnaireAdd = _.template(
                    '<form>' +
                    '<label>Title<br />' +
                    '<input type="text" name="Title" />' +
                    '</label>' +
                    '<ul class="options">' +
                    '<li class="create">Create</li>' +
                    '<li class="cancel">Cancel</li>' +
                    '</ul>' +
                    '</form>'
                );

                var QuestionnaireEdit = _.template(
                    '<form>' +
                    '<label>Title<br />' +
                    '<input type="text" name="Title" value="{{Title}}" />' +
                    '</label>' +
                    '<ul class="options">' +
                    '<li class="save">Save</li>' +
                    '<li class="cancel">Cancel</li>' +
                    '</ul>' +
                    '</form>'
                );

                var QuestionnaireDestroy = _.template(
                    '<h2>Are you sure you want to destroy {{Title}}?</h2>' +
                    '<ul class="options">' +
                    '<li class="confirm">Yes</li>' +
                    '<li class="cancel">No</li>' +
                    '</ul>'
                );

                var QuestionList = _.template(
                    ''
                );

                var QuestionListItem = _.template(
                    '<div class="text">{{Text}}</div>' +
                    '<ul class="options">' +
                    '<li class="show">Show</li>' +
                    '<li class="edit">Edit</li>' +
                    '<li class="destroy">Destroy</li>' +
                    '</ul>'
                );

                var QuestionShow = _.template(
                    '<h2>{{Text}}</h2>' +
                    '<ul class="options">' +
                    '<li class="create">Create Choice</li>' +
                    '<li class="back">Back to Questionnaire</li>' +
                    '</ul>'
                );

                var QuestionAdd = _.template(
                    '<form>' +
                    '<input type="hidden" name="QuestionnaireId" value="{{QuestionnaireId}}" />' +
                    '<label>Text<br />' +
                    '<input type="text" name="Text" />' +
                    '</label>' +
                    '<ul class="options">' +
                    '<li class="create">Create</li>' +
                    '<li class="cancel">Cancel</li>' +
                    '</ul>' +
                    '</form>'
                );

                var QuestionEdit = _.template(
                    '<form>' +
                    '<label>Text<br />' +
                    '<input type="text" name="Text" value="{{Text}}" />' +
                    '</label>' +
                    '<ul class="options">' +
                    '<li class="save">Save</li>' +
                    '<li class="cancel">Cancel</li>' +
                    '</ul>' +
                    '</form>'
                );

                var QuestionDestroy = _.template(
                    '<h2>Are you sure you want to destroy {{Text}}?</h2>' +
                    '<ul class="options">' +
                    '<li class="confirm">Yes</li>' +
                    '<li class="cancel">No</li>' +
                    '</ul>'
                );

                var ChoiceList = _.template(
                    ''
                );

                var ChoiceListItem = _.template(
                    '<div class="text">{{Text}}</div>' +
                    '<ul class="options">' +
                    '<li class="edit">Edit</li>' +
                    '<li class="destroy">Destroy</li>' +
                    '</ul>'
                );

                var ChoiceAdd = _.template(
                    '<form>' +
                    '<input type="hidden" name="QuestionId" value="{{QuestionId}}" />' +
                    '<label>Text<br />' +
                    '<input type="text" name="Text" />' +
                    '</label>' +
                    '<ul class="options">' +
                    '<li class="create">Create</li>' +
                    '<li class="cancel">Cancel</li>' +
                    '</ul>' +
                    '</form>'
                );

                var ChoiceEdit = _.template(
                    '<form>' +
                    '<label>Text<br />' +
                    '<input type="text" name="Text" value="{{Text}}" />' +
                    '</label>' +
                    '<ul class="options">' +
                    '<li class="save">Save</li>' +
                    '<li class="cancel">Cancel</li>' +
                    '</ul>' +
                    '</form>'
                );

                var ChoiceDestroy = _.template(
                    '<h2>Are you sure you want to destroy {{Text}}?</h2>' +
                    '<ul class="options">' +
                    '<li class="confirm">Yes</li>' +
                    '<li class="cancel">No</li>' +
                    '</ul>'
                );

                return {
                    MessageShow: MessageShow,
                    QuestionnaireList: QuestionnaireList,
                    QuestionnaireListItem: QuestionnaireListItem,
                    QuestionnaireShow: QuestionnaireShow,
                    QuestionnaireAdd: QuestionnaireAdd,
                    QuestionnaireEdit: QuestionnaireEdit,
                    QuestionnaireDestroy: QuestionnaireDestroy,
                    QuestionList: QuestionList,
                    QuestionListItem: QuestionListItem,
                    QuestionShow: QuestionShow,
                    QuestionAdd: QuestionAdd,
                    QuestionEdit: QuestionEdit,
                    QuestionDestroy: QuestionDestroy,
                    ChoiceList: ChoiceList,
                    ChoiceListItem: ChoiceListItem,
                    ChoiceAdd: ChoiceAdd,
                    ChoiceEdit: ChoiceEdit,
                    ChoiceDestroy: ChoiceDestroy
                };
            })();

            var Views = (function() {
                var Application = Backbone.View.extend({
                    el: '#application',
                    events: {
                        
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'showMessage',
                            'listQuestionnaires',
                            'showQuestionnaire',
                            'createQuestionnaire',
                            'editQuestionnaire',
                            'destroyQuestionnaire',
                            'showQuestion',
                            'createQuestion',
                            'editQuestion',
                            'destroyQuestion',
                            'destroyChoice',
                            'createChoice',
                            'editChoice',
                            'destroyChoice',
                            'show'
                        );
                    },
                    showMessage: function(type, msg) {
                        var model = new Models.Message({
                            Type: type,
                            Message: msg
                        });
                        var view = new MessageShow({
                            el: '#messages',
                            model: model
                        });
                        view.on('rendered', this.show);
                        view.render();
                        return this;
                    },
                    listQuestionnaires: function(collection) {
                        var view = new QuestionnaireList({
                            collection: collection
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    showQuestionnaire: function(model) {
                        var view = new QuestionnaireShow({
                            model: model
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    createQuestionnaire: function() {
                        var view = new QuestionnaireAdd({
                            model: new Models.Questionnaire()
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    editQuestionnaire: function(model) {
                        var view = new QuestionnaireEdit({
                            model: model
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    destroyQuestionnaire: function(model) {
                        var view = new QuestionnaireDestroy({
                            model: model
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    showQuestion: function(model) {
                        var view = new QuestionShow({
                            model: model
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    createQuestion: function (questionnaireId) {
                        var view = new QuestionAdd({
                            model: new Models.Question({
                                QuestionnaireId: questionnaireId
                            })
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    editQuestion: function(model) {
                        var view = new QuestionEdit({
                            model: model
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    destroyQuestion: function(model) {
                        var view = new QuestionDestroy({
                            model: model
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    createChoice: function(questionId) {
                        var view = new ChoiceAdd({
                            model: new Models.Choice({
                                QuestionId: questionId
                            })
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    editChoice: function(model) {
                        var view = new ChoiceEdit({
                            model: model
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    destroyChoice: function(model) {
                        var view = new ChoiceDestroy({
                            model: model
                        });
                        view.once('rendered', this.show);
                        view.once('navigate', this.navigate);
                        this.$el.html(view.render().el);
                        return this;
                    },
                    show: function ($el) {
                        $el.fadeIn(1000);
                    },
                    navigate: function (url) {
                        this.remove();
                        Backbone.history.navigate(url, {
                            trigger: true
                        });
                    }
                });

                var MessageShow = Backbone.View.extend({
                    template: Templates.MessageShow,
                    events: {
                        
                    },
                    initialize: function(options) {
                        _.bindAll(this, 
                            'render'
                        );
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    }
                });

                var QuestionnaireList = Backbone.View.extend({
                    template: Templates.QuestionnaireList,
                    tagName: 'section',
                    className: 'questionnaires',
                    events: {
                        'click .create': 'create'
                    },
                    initialize: function(options) {
                        _.bindAll(this, 
                            'render', 
                            'all', 
                            'add', 
                            'create'
                        );
                    },
                    render: function() {
                        this.$el.html(this.template());
                        this.all();
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    all: function() {
                        this.collection.each(this.add, this);
                    },
                    add: function(model) {
                        var view = new QuestionnaireListItem({
                            model: model
                        });
                        view.once('navigate', function (url) {
                            this.trigger('navigate', url);
                        }, this);
                        this.$el.append(view.render().el);
                    },
                    create: function() {
                        this.trigger('navigate', 'questionnaire/create');
                    }
                });

                var QuestionnaireListItem = Backbone.View.extend({
                    template: Templates.QuestionnaireListItem,
                    tagName: 'section',
                    className: 'questionnaire',
                    events: {
                        'click .answer': 'answer',
                        'click .show': 'show',
                        'click .edit': 'edit',
                        'click .destroy': 'destroy'
                    },
                    initialize: function(options) {
                        _.bindAll(this, 
                            'render', 
                            'answer', 
                            'show', 
                            'edit', 
                            'destroy'
                        );
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    answer: function() {
                        alert('answer');
                    },
                    show: function() {
                        this.trigger('navigate', 'questionnaire/' + this.model.get('Id'));
                    },
                    edit: function() {
                        this.trigger('navigate', 'questionnaire/edit/' + this.model.get('Id'));
                    },
                    destroy: function() {
                        this.trigger('navigate', 'questionnaire/destroy/' + this.model.get('Id'));
                    }
                });

                var QuestionnaireShow = Backbone.View.extend({
                    template: Templates.QuestionnaireShow,
                    tagName: 'section',
                    className: 'questionnaire',
                    events: {
                        'click .create': 'create',
                        'click .back': 'back'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'create',
                            'back'
                        );
                    },
                    render: function() {
                        var view = new QuestionList({
                            collection: new Collections.Questions(this.model.get('Questions'))
                        });
                        view.once('navigate', function (url) {
                            this.trigger('navigate', url);
                        }, this);
                        this.$el.html(this.template(this.model.toJSON()));
                        this.$el.append(view.render().el);
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    create: function () {
                        this.trigger('navigate', 'question/create/' + this.model.get('Id'));
                    },
                    back: function () {
                        this.trigger('navigate', '');
                    }
                });

                var QuestionnaireAdd = Backbone.View.extend({
                    template: Templates.QuestionnaireAdd,
                    tagName: 'section',
                    className: 'questionnaire-form',
                    events: {
                        'click .create': 'create',
                        'click .cancel': 'cancel',
                        'submit form': 'create'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'create',
                            'cancel',
                            'created'
                        );
                    },
                    render: function() {
                        this.$el.html(this.template());
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    create: function () {
                        new Collections.Questionnaires([this.model]);
                        this.model.once('sync', this.created);
                        this.model.set('Title', $('input[name=Title]', this.el).val());
                        this.model.save();
                        return false; // stop event propagating
                    },
                    cancel: function () {
                        this.trigger('navigate', '');
                    },
                    created: function(m, c, o) {
                        this.trigger('navigate', 'questionnaire/' + m.get('Id') + '/info/Questionnaire ' + m.get('Title') + ' created');
                    }
                });

                var QuestionnaireEdit = Backbone.View.extend({
                    template: Templates.QuestionnaireEdit,
                    tagName: 'section',
                    className: 'questionnaire-form',
                    events: {
                        'click .save': 'save',
                        'click .cancel': 'cancel',
                        'submit form': 'save'
                    },
                    initialize: function (options) {
                        _.bindAll(this,
                            'render',
                            'save',
                            'cancel',
                            'saved'
                        );
                    },
                    render: function () {
                        this.$el.html(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    save: function () {
                        this.model.once('sync', this.saved);
                        this.model.set('Title', $('input[name=Title]', this.el).val());
                        this.model.save();
                        return false; // stop event propagating
                    },
                    cancel: function () {
                        this.trigger('navigate', 'questionnaire/' + this.model.get('Id'));
                    },
                    saved: function (m, c, o) {
                        this.trigger('navigate', 'questionnaire/' + m.get('Id') + '/info/Questionnaire ' + m.get('Title') + ' updated');
                    }
                });

                var QuestionnaireDestroy = Backbone.View.extend({
                    template: Templates.QuestionnaireDestroy,
                    tagName: 'section',
                    className: 'questionnaire-form',
                    events: {
                        'click .confirm': 'confirm',
                        'click .cancel': 'cancel'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'confirm',
                            'cancel',
                            'destroyed'
                        );
                        this.model.once('destroy', this.destroyed);
                    },
                    render: function() {
                        this.$el.append(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    confirm: function () {
                        this.model.destroy();
                    },
                    cancel: function() {
                        this.trigger('navigate', 'questionnaire/' + this.model.get('Id'));
                    },
                    destroyed: function(m, c, o) {
                        this.trigger('navigate', '/info/Questionnaire ' + m.get('Title') + ' destroyed');
                    }
                });

                var QuestionList = Backbone.View.extend({
                    tagName: 'section',
                    className: 'questions',
                    template: Templates.QuestionList,
                    events: {

                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'all',
                            'add'
                        );
                    },
                    render: function() {
                        this.$el.html(this.template());
                        this.all();
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    all: function() {
                        this.collection.each(this.add, this);
                    },
                    add: function(model) {
                        var view = new QuestionListItem({
                            model: model
                        });
                        view.once('navigate', function(url) {
                            this.trigger('navigate', url);
                        }, this);
                        this.$el.append(view.render().el);
                    }
                });

                var QuestionListItem = Backbone.View.extend({
                    template: Templates.QuestionListItem,
                    tagName: 'section',
                    className: 'question',
                    events: {
                        'click .show': 'show',
                        'click .edit': 'edit',
                        'click .destroy': 'destroy'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'show',
                            'edit',
                            'destroy'
                        );
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    show: function () {
                        this.trigger('navigate', 'question/' + this.model.get('Id'));
                    },
                    edit: function() {
                        this.trigger('navigate', 'question/edit/' + this.model.get('Id'));
                    },
                    destroy: function() {
                        this.trigger('navigate', 'question/destroy/' + this.model.get('Id'));
                    }
                });

                var QuestionShow = Backbone.View.extend({
                    template: Templates.QuestionShow,
                    tagName: 'section',
                    className: 'question',
                    events: {
                        'click .create': 'create',
                        'click .back': 'back'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'create',
                            'back'
                        );
                    },
                    render: function() {
                        var view = new ChoiceList({
                            collection: new Collections.Choices(this.model.get('Choices'))
                        });
                        view.once('navigate', function (url) {
                            this.trigger('navigate', url);
                        }, this);
                        this.$el.html(this.template(this.model.toJSON()));
                        this.$el.append(view.render().el);
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    create: function () {
                        this.trigger('navigate', 'choice/create/' + this.model.get('Id'));
                    },
                    back: function () {
                        this.trigger('navigate', 'questionnaire/' + this.model.get('QuestionnaireId'));
                    }
                });

                var QuestionAdd = Backbone.View.extend({
                    template: Templates.QuestionAdd,
                    tagName: 'section',
                    className: 'question-form',
                    events: {
                        'click .create': 'create',
                        'click .cancel': 'cancel',
                        'submit form': 'create'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'create',
                            'cancel',
                            'created'
                        );
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    create: function () {
                        new Collections.Questions([this.model]);
                        this.model.once('sync', this.created);
                        this.model.set('QuestionnaireId', $('input[name=QuestionnaireId]', this.el).val());
                        this.model.set('Text', $('input[name=Text]', this.el).val());
                        this.model.save();
                        return false; // stop event propagating
                    },
                    cancel: function () {
                        this.trigger('navigate', 'questionnaire/' + this.model.get('QuestionnaireId'));
                    },
                    created: function(m, c, o) {
                        this.trigger('navigate', 'question/' + m.get('Id') + '/info/Question ' + m.get('Text') + ' created');
                    }
                });

                var QuestionEdit = Backbone.View.extend({
                    template: Templates.QuestionEdit,
                    tagName: 'section',
                    className: 'question-form',
                    events: {
                        'click .save': 'save',
                        'click .cancel': 'cancel',
                        'submit form': 'save'
                    },
                    initialize: function (options) {
                        _.bindAll(this,
                            'render',
                            'save',
                            'cancel',
                            'saved'
                        );
                    },
                    render: function () {
                        this.$el.html(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    save: function () {
                        this.model.once('sync', this.saved);
                        this.model.set('Text', $('input[name=Text]', this.el).val());
                        this.model.save();
                        return false; // stop event propagating
                    },
                    cancel: function () {
                        this.trigger('navigate', 'question/' + this.model.get('Id'));
                    },
                    saved: function (m, c, o) {
                        this.trigger('navigate', 'question/' + m.get('Id') + '/info/Question ' + m.get('Text') + ' updated');
                    }
                });

                var QuestionDestroy = Backbone.View.extend({
                    template: Templates.QuestionDestroy,
                    events: {
                        'click .confirm': 'confirm',
                        'click .cancel': 'cancel'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'confirm',
                            'cancel',
                            'destroyed'
                        );
                        this.model.once('destroy', this.destroyed);
                    },
                    render: function() {
                        this.$el.append(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    confirm: function() {
                        this.model.destroy();
                    },
                    cancel: function () {
                        this.trigger('navigate', 'question/' + this.model.get('Id'));
                    },
                    destroyed: function(m, c, o) {
                        this.trigger('navigate', 'questionnaire/' + m.get('QuestionnaireId') + '/info/Question ' + m.get('Text') + ' destroyed');
                    }
                });

                var ChoiceList = Backbone.View.extend({
                    template: Templates.ChoiceList,
                    tagName: 'section',
                    className: 'choices',
                    events: {
                                                                                                
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'all',
                            'add'
                        );
                    },
                    render: function () {
                        this.$el.html(this.template());
                        this.all();
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    all: function() {
                        this.collection.each(this.add, this);
                    },
                    add: function(model) {
                        var view = new ChoiceListItem({
                            model: model
                        });
                        view.once('navigate', function (url) {
                            this.trigger('navigate', url);
                        }, this);
                        this.$el.append(view.render().el);
                    }
                });

                var ChoiceListItem = Backbone.View.extend({
                    template: Templates.ChoiceListItem,
                    tagName: 'section',
                    className: 'choice',
                    events: {
                        'click .edit': 'edit',
                        'click .destroy': 'destroy'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'edit',
                            'destroy'
                        );
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    edit: function() {
                        this.trigger('navigate', 'choice/edit/' + this.model.get('Id'));
                    },
                    destroy: function() {
                        this.trigger('navigate', 'choice/destroy/' + this.model.get('Id'));
                    }
                });

                var ChoiceAdd = Backbone.View.extend({
                    template: Templates.ChoiceAdd,
                    tagName: 'section',
                    className: 'choice-form',
                    events: {
                        'click .create': 'create',
                        'click .cancel': 'cancel',
                        'submit form': 'create'
                    },
                    initialize: function (options) {
                        _.bindAll(this,
                            'render',
                            'create',
                            'cancel',
                            'created'
                        );
                    },
                    render: function () {
                        this.$el.html(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    create: function () {
                        new Collections.Choices([this.model]);
                        this.model.once('sync', this.created);
                        this.model.set('QuestionId', $('input[name=QuestionId]', this.el).val());
                        this.model.set('Text', $('input[name=Text]', this.el).val());
                        this.model.save();
                        return false; // stop event propagating
                    },
                    cancel: function () {
                        this.trigger('navigate', 'question/' + this.model.get('QuestionId'));
                    },
                    created: function (m, c, o) {
                        this.trigger('navigate', 'question/' + m.get('QuestionId') + '/info/Choice ' + m.get('Text') + ' created');
                    }
                });

                var ChoiceEdit = Backbone.View.extend({
                    template: Templates.ChoiceEdit,
                    events: {
                        'click .save': 'save',
                        'click .cancel': 'cancel',
                        'submit form': 'save'
                    },
                    initialize: function (options) {
                        _.bindAll(this,
                            'render',
                            'save',
                            'cancel',
                            'saved'
                        );
                    },
                    render: function () {
                        this.$el.html(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    save: function () {
                        this.model.once('sync', this.saved);
                        this.model.set('Text', $('input[name=Text]', this.el).val());
                        this.model.save();
                        return false; // stop event propagating
                    },
                    cancel: function () {
                        this.trigger('navigate', 'question/' + this.model.get('QuestionId'));
                    },
                    saved: function (m, c, o) {
                        this.trigger('navigate', 'question/' + m.get('QuestionId') + '/info/Choice ' + m.get('Text') + ' updated');
                    }
                });

                var ChoiceDestroy = Backbone.View.extend({
                    template: Templates.ChoiceDestroy,
                    events: {
                        'click .confirm': 'confirm',
                        'click .cancel': 'cancel'
                    },
                    initialize: function(options) {
                        _.bindAll(this,
                            'render',
                            'confirm',
                            'cancel',
                            'destroyed'
                        );
                        this.model.on('destroy', this.destroyed);
                    },
                    render: function() {
                        this.$el.append(this.template(this.model.toJSON()));
                        this.trigger('rendered', this.$el);
                        return this;
                    },
                    confirm: function() {
                        this.model.destroy();
                    },
                    cancel: function() {
                        this.trigger('navigate', 'question/' + this.model.get('QuestionId'));
                    },
                    destroyed: function(m, c, o) {
                        this.trigger('navigate', 'question/' + m.get('QuestionId') + '/info/Choice ' + m.get('Text') + ' destroyed');
                    }
                });

                return {
                    Application: Application,
                    MessageShow: MessageShow,
                    QuestionnaireList: QuestionnaireList,
                    QuestionnaireListItem: QuestionnaireListItem,
                    QuestionnaireAdd: QuestionnaireAdd,
                    QuestionnaireEdit: QuestionnaireEdit,
                    QuestionnaireDestroy: QuestionnaireDestroy,
                    QuestionList: QuestionList,
                    QuestionListItem: QuestionListItem,
                    QuestionAdd: QuestionAdd,
                    QuestionEdit: QuestionEdit,
                    QuestionDestroy: QuestionDestroy,
                    ChoiceList: ChoiceList,
                    ChoiceListItem: ChoiceListItem,
                    ChoiceAdd: ChoiceAdd,
                    ChoiceEdit: ChoiceEdit,
                    ChoiceDestroy: ChoiceDestroy
                };
            })();

            var Router = Backbone.Router.extend({
                routes: {
                    'questionnaire/create': 'createQuestionnaire',
                    'questionnaire/edit/:id': 'editQuestionnaire',
                    'questionnaire/destroy/:id': 'destroyQuestionnaire',
                    'questionnaire/:id(/:type)(/:msg)': 'showQuestionnaire',
                    'question/create/:questionnaireId': 'createQuestion',
                    'question/edit/:id': 'editQuestion',
                    'question/destroy/:id': 'destroyQuestion',
                    'question/:id(/:type)(/:msg)': 'showQuestion',
                    'choice/create/:questionId': 'createChoice',
                    'choice/edit/:id': 'editChoice',
                    'choice/destroy/:id': 'destroyChoice',
                    '(:type)(/:msg)*actions': 'index'
                },
                initialize: function(options) {
                    _.bindAll(this,
                        'index',
                        'showQuestionnaire',
                        'createQuestionnaire',
                        'editQuestionnaire',
                        'destroyQuestionnaire',
                        'showQuestion',
                        'createQuestion',
                        'editQuestion',
                        'destroyQuestion',
                        'createChoice',
                        'editChoice',
                        'destroyChoice'
                    );
                    this.application = new Views.Application({
                        el: '#application'
                    });
                },
                index: function(type, msg) {
                    if (type && msg) {
                        this.application.showMessage(type, msg);
                    }
                    var collection = new Collections.Questionnaires();
                    collection.on('reset', this.application.listQuestionnaires);
                    collection.fetch({ reset: true });
                },
                showQuestionnaire: function (id, type, msg) {
                    if (type && msg) {
                        this.application.showMessage(type, msg);
                    }
                    var model = new Models.Questionnaire({ Id: id });
                    var collection = new Collections.Questionnaires([model]);
                    model.on('change', this.application.showQuestionnaire);
                    model.fetch();
                },
                createQuestionnaire: function() {
                    this.application.createQuestionnaire();
                },
                editQuestionnaire: function(id) {
                    var model = new Models.Questionnaire({ Id: id });
                    var collection = new Collections.Questionnaires([model]);
                    model.on('change', this.application.editQuestionnaire);
                    model.fetch();
                },
                destroyQuestionnaire: function(id) {
                    var model = new Models.Questionnaire({ Id: id });
                    var collection = new Collections.Questionnaires([model]);
                    model.on('change', this.application.destroyQuestionnaire);
                    model.fetch();
                },
                showQuestion: function (id, type, msg) {
                    if (type && msg) {
                        this.application.showMessage(type, msg);
                    }
                    var model = new Models.Question({ Id: id });
                    var collection = new Collections.Questions([model]);
                    model.on('change', this.application.showQuestion);
                    model.fetch();
                },
                createQuestion: function(questionnaireId) {
                    this.application.createQuestion(questionnaireId);
                },
                editQuestion: function (id) {
                    var model = new Models.Question({ Id: id });
                    var collection = new Collections.Questions([model]);
                    model.on('change', this.application.editQuestion);
                    model.fetch();
                },
                destroyQuestion: function(id) {
                    var model = new Models.Question({ Id: id });
                    var collection = new Collections.Questions([model]);
                    model.on('change', this.application.destroyQuestion);
                    model.fetch();
                },
                createChoice: function(questionId) {
                    this.application.createChoice(questionId);
                },
                editChoice: function(id) {
                    var model = new Models.Choice({ Id: id });
                    var collection = new Collections.Choices([model]);
                    model.on('change', this.application.editChoice);
                    model.fetch();
                },
                destroyChoice: function(id) {
                    var model = new Models.Choice({ Id: id });
                    var collection = new Collections.Choices([model]);
                    model.on('change', this.application.destroyChoice);
                    model.fetch();
                }
            });

            return {
                Models: Models,
                Collections: Collections,
                Views: Views,
                Templates: Templates,
                Router: Router
            };
        };

        $(function() {
            _.templateSettings = {
                interpolate: /\{\{(.+?)\}\}/g
            };

            var questionnaires = new Questionnaires();

            var router = new questionnaires.Router();

            Backbone.history.start();
        });
    </script>
    }
